<html>
<head>
<title>GPTL timing library Home Page</title>
<meta name="description" content="Profile multi-threaded and multi-tasked 
C, C++, and Fortran codes. Optional PAPI interface. Automatically generate a
dynamic call tree">
<meta name="Keywords" content="gptl","papi","call tree","profile","timing","performance analysis">
<meta name="Author" content="Jim Rosinski">
<h1>GPTL - General Purpose Timing Library</h1>
<h2>(with optional PAPI interface)</h2>
<h2>Download the latest release by clicking <a href="gptl3_5_2.tar.gz">here</a>
</head>
<body bgcolor="peachpuff">

<HR SIZE=2 WIDTH="100%" ALIGN="LEFT" NOSHADE>
<h2>Description</h2>
<b>GPTL</b> is a library to instrument C, C++, and Fortran codes for
    performance analysis and profiling. The instrumentation can be inserted
    manually by the user wherever they wish, or it can be done automatically
    by the compiler at function entry and exit points if the application being
    profiled is built with GNU, Pathscale, Intel, or PGI (8.0.2 or later)
    compilers. To auto-instrument an application,
    add <b><em>-finstrument-functions</em></b> (Pathscale, GNU, Intel)
    or <b><em>-Minstrument:functions</em></b> (PGI) to 
    the compile and link flags of the source files to be profiled. Here is a portion of
    <b>GPTL</b> printout after running the HPCC benchmark with automatic
    instrumentation enabled: 
<pre>
<div style="background-color:white;">
Stats for thread 0:
                                             Called  Recurse Wallclock max       min       FP_OPS   e6_/_sec CI       
  total                                            1     -      64.021    64.021    64.021 3.50e+08     5.47 7.20e-02 
    HPCC_Init                                     11      10     0.157     0.157     0.000    95799     0.61 8.90e-02 
*     HPL_pdinfo                                 120     118     0.019     0.018     0.000    96996     4.99 8.56e-02 
*       HPL_all_reduce                             7     -       0.043     0.036     0.000      448     0.01 1.03e-02 
*         HPL_broadcast                           21     -       0.041     0.036     0.000      126     0.00 6.72e-03 
        HPL_pdlamch                                2     -       0.004     0.004     0.000    94248    21.21 1.13e-01 
*       HPL_fprintf                              240     120     0.001     0.000     0.000     1200     0.93 6.67e-03 
      HPCC_InputFileInit                          41      40     0.001     0.001     0.000      194     0.27 8.45e-03 
        ReadInts                                   2     -       0.000     0.000     0.000       12     3.00 1.61e-02 
    PTRANS                                        21      20    22.667    22.667     0.000 4.19e+07     1.85 3.19e-02 
      MaxMem                                       5       4     0.000     0.000     0.000      796     2.70 1.79e-02 
*     iceil_                                     132     -       0.000     0.000     0.000      792     2.88 1.75e-02 
*     ilcm_                                       14     -       0.000     0.000     0.000       84     2.71 1.71e-02 
      param_dump                                  18      12     0.000     0.000     0.000       84     0.82 7.05e-03 
      Cblacs_get                                   5     -       0.000     0.000     0.000       30     1.43 1.67e-02 
      Cblacs_gridmap                              35      30     0.005     0.001     0.000      225     0.05 1.79e-03 
*       Cblacs_pinfo                               7       1     0.000     0.000     0.000       40     3.08 1.54e-02 
*     Cblacs_gridinfo                             60      50     0.000     0.000     0.000      260     2.28 2.10e-02 
      Cigsum2d                                     5     -       0.088     0.047     0.000      165     0.00 6.37e-03 
      pdmatgen                                    20     -      21.497     1.213     0.942 4.00e+07     1.86 3.08e-02 
*       numroc_                                   96     -       0.000     0.000     0.000      576     2.87 1.69e-02 
*       setran_                                   25     -       0.000     0.000     0.000      150     2.94 1.72e-02 
*       pdrand                               3.7e+06   2e+06    15.509     0.041     0.000 1.72e+07     1.11 2.24e-02 
        xjumpm_                                57506   57326     0.219     0.030     0.000   230384     1.05 2.66e-02 
        jumpit_                                60180   40120     0.214     0.021     0.000   280840     1.32 2.18e-02 
      slboot_                                      5     -       0.000     0.000     0.000       30     1.30 1.01e-02 
      Cblacs_barrier                              10       5     0.481     0.167     0.000       50     0.00 3.26e-03 
      sltimer_                                    10     -       0.000     0.000     0.000      614     3.05 1.90e-02 
*       dwalltime00                               15     -       0.000     0.000     0.000      150     2.54 2.57e-02 
*       dcputime00                                15     -       0.000     0.000     0.000      373     3.06 1.91e-02 
*         HPL_ptimer_cputime                      17     -       0.000     0.000     0.000      170     2.66 2.29e-02 
      pdtrans                                     14       9     0.124     0.045     0.000   573505     4.61 1.36e-01 
        Cblacs_dSendrecv                          12       8     0.115     0.042     0.000       56     0.00 2.24e-03 
      pdmatcmp                                     5     -       0.448     0.295     0.003 1.29e+06     2.87 2.94e-01 
*       HPL_daxpy                               2596     -       0.008     0.000     0.000 1.34e+06   177.06 4.40e-01 
*       HPL_idamax                              2966     -       0.007     0.000     0.000   767291   104.75 4.15e-01 
...
</div>
</pre>
    Function names on the left of the output are indented to indicate their
    parent, and depth in the call tree. An asterisk next to an entry means it
    has more than one parent (see <A HREF="example2.html">Example 2</A> for
    further details). Other entries in this output show the number of
    invocations, number of recursive invocations, wallclock timing
    statistics, and PAPI-based information. In this example, HPL_daxpy
    produced 1.34e6 floating point operations, 177.06 MFlops/sec, and had a
    computational intensity (floating point ops per memory reference) of
    0.415. 
<p>
    If the <a HREF="http://icl.cs.utk.edu/papi">PAPI</a> library is
    installed on the target platform, <b>GPTL</b> can be used to
    access all available <b>PAPI</b> events.
    To count floating point operations for example, one need only add
    a call that looks like: 

    <pre>
    ret = GPTLsetoption (PAPI_FP_OPS, 1);
    </pre>

    The second argument "1" in the above call means "enable". Any non-zero
    integer means "enable", and a zero means "disable".
    Multiple <b>GPTL</b> or <b>PAPI</b> options can be specified with additional
    calls to <b>GPTLsetoption()</b>. The man pages provided with the
    distribution describe the full API specification. The interface is
    identical for both Fortran and C/C++ 
    codes, modulo the case-insensitivity of Fortran. 
<p>
    Calls to <b>GPTLstart()</b> and <b>GPTLstop()</b> can be nested to an
    arbitrary depth. As shown above, <b>GPTL</b> handles nested regions by
    presenting output in an indented fashion. The example also shows how
    auto-instrumentation 
    can be used to easily produce a dynamic call tree of
    the application being profiled, where region names correspond to function
	entry and exit points.

<HR SIZE=2 WIDTH="100%" ALIGN="LEFT" NOSHADE>
<h2>What's new in the latest release (<a href="gptl3_5_2.tar.gz">gptl3_5_2.tar.gz</a>)</h2>
<ul>
<li> Bugfix for when omp_get_max_threads() returns zero.
<li> <b>GPTLallocate()</b> returns error when asked for zero bytes.
</ul>

<HR SIZE=2 WIDTH="100%" ALIGN="LEFT" NOSHADE>
<h2>What was new in previous releases
<h3>GPTL3.5.1 <a href="older/gptl3_5_1.tar.gz">gptl3_5_1.tar.gz</a>)</h3>
<ul>
<li> OpenMP applications now work when GPTL is built with PTHREADS
<li> Fortran bugfix enables longer event names. This allows one to enable the
  PAPI native event names which can be long.
<li> Remove some of the relatively unuseful entries from ctests/ and ftests/.
<li> Tested on AIX.
</ul>

<h3>GPTL3.5 <a href="older/gptl3_5.tar.gz">gptl3_5.tar.gz</a>)</h3>
<ul>
<li> Easier linking with C++ applications.
<li> Options for call-tree generation based on number of invocations per
parent: most_frequent (default), first_parent, last_parent, full_tree. 
Previous versions always used first_parent. New option <em>full_tree</em> can
produce <b>tons</b> of output depending the nature of the call tree. But it
can also be very useful because it shows all parent-child relationships.
<li> Derived events based on PAPI:
  <ul>
  <li> L2 miss rate (GPTL_L2MRT)
  <li> Load-stores per L2 miss (GPTL_LSTPL2M)
  <li> L3 miss rate (GPTL_L3MRT)
  </ul>
<li> Function <b>GPTLpr_summary()</b> now takes an MPI communicator as its
argument. Passing an "int" doesn't work with some MPI implementations (e.g. OpenMPI).
<li> New subroutine <b>gptlprocess_namelist()</b> enables Fortran codes to
use a namelist to set <b>GPTL</b> options. This allows changing settings
without having to recompile or relink application
codes. See <A HREF="example5.html">Example 5</A> for example usage.
<li> New function <b>GPTLget_eventvalue()</b> allows an application to query
the current value of any PAPI-based event, including derived events.
<li> New function <b>GPTLget_wallclock()</b> allows an application to query
the current wallclock accumulation for any region.
<li> New function <b>GPTLbarrier()</b> calls <b>MPI_Barrier()</b> and times it.
<li> <em><b>parsegptlout.pl</b></em> now takes header name as an argument rather
than an integer index.
<li> <em><b>hex2name.pl</b></em> converts auto-instrumented entries for thread summary regions.
</ul>

<h3>GPTL3.4.7 <a href="older/gptl3_4_7.tar.gz">gptl3_4_7.tar.gz</a>)</h3>
<ul>
<li> Derived events based on PAPI:
  <ul>
  <li> Computational intensity (GPTL_CI)
  <li> Instructions per cycle (GPTL_IPC)
  <li> FP ops per cycle (GPTL_FPC)
  <li> FP ops per instruction (GPTL_FPI)
  <li> Load-store instruction fraction (GPTL_LSTPI)
  <li> L1 miss rate (GPTL_DCMRT)
  <li> Load-stores per L1 miss (GPTL_LSTPDCM)
  </ul>
<li> New entry points <b>GPTLevent_code_to name()</b> and <b>GPTLevent_name_to_code()</b>
<li> Ability to disable portions of printed output (e.g. GPTLdopr_preamble)
<li> Better description of enabled events
</ul>

<HR SIZE=2 WIDTH="100%" ALIGN="LEFT" NOSHADE>
<h2>Features</h2>
<ul>
<li> Low overhead.
<li> No external dependencies (<b>PAPI</b> interface is optional).
<li> Automatically multiplexes requested <b>PAPI</b> counters when required.
<li> Thread-safe, and reports per-thread statistics for multi-threaded
	codes.
<li> Includes utility functions to print memory usage
	(<b>GPTLprint_memusage()</b>) and get timestamps (<b>GPTLstamp()</b>).
<li> Includes utility scripts to post-process multi-threaded and
	multi-tasked output for easy assessment of load balance
	characteristics.
<li> Support for derived (<b>PAPI</b>-based) events such as computational
	intensity and instructions per cycle. Run ctests/avail to list
	available events.
</ul>

<HR SIZE=2 WIDTH="100%" ALIGN="LEFT" NOSHADE>
<h2>Download and Installation</h2>
<ul> 
<li> Download the most recent release by clicking this link: <a href="gptl3_5_2.tar.gz">gptl3_5_2.tar.gz</a>.
<li> Earlier versions can be found <a href="older/">here</a>.
<li> To build and install <b>GPTL</b>, see the <A HREF="./INSTALL">INSTALL</a> file.
  You'll need to create a <b><em>macros.make</em></b> file appropriate for your target
  platform. Example files for various architectures are
  included in the tar file (e.g. <b><em>macros.make.linux</em></b>). An autoconf-based 
  script named <b><em>suggestions</em></b> is included to help in editing this
  file. Example usage might be:
<pre>
./suggestions FC=gfortran CC=gcc
</pre>
Comments in the sample <b><em>macros.make</em></b> files describe 
  each required setting.
<li> For information on using <b>GPTL</b>, refer to 
  <A HREF="#EXAMPLES">EXAMPLES</A> below, and the man pages provided with the
  distribution. 
</ul>

<HR SIZE=2 WIDTH="100%" ALIGN="LEFT" NOSHADE>
<A name=EXAMPLES></A>
<h2>Examples</h2>
  These pages contain simple codes which illustrate the use of some features of
  <b>GPTL</b>. All examples were run on a Linux x86 using GNU compilers. 
  <p>
  <A HREF="example1.html">Example 1</A> is a manually-instrumented
  Fortran code which uses <b>PAPI</b> to count floating point
  operations. 
  <p>
  <A HREF="example2.html">Example 2</A> is a C code compiled
  with gcc's auto-instrumentation hooks to print a dynamic call tree. Perl
  script <b><em>hex2name.pl</em></b> is used to convert addresses to 
  human-readable names.
  <p>
  <A HREF="example3.html">Example 3</A> is a simple MPI code, the
  output of which is post-processed using Perl script
  <em><b>parsegpltout.pl</b></em> to examine load imbalance.
  <p>
  <A HREF="example4.html">Example 4</A> is an auto-instrumented C++ code.
  Issues related to in-line constructors are illustrated.
  <p>
  <A HREF="example5.html">Example 5</A> is a Fortran code which uses
  <b>gptlprocess_namelist()</b> and an associated namelist file to
  set <b>GPTL</b> options.

<HR SIZE=2 WIDTH="100%" ALIGN="LEFT" NOSHADE>

<h2>Bugs</h2>
<ul>
<li> Calling <b>GPTLinitialize()</b> after <b>GPTLfinalize()</b> is untested.
<li> Increasing the thread count after <b>GPTLinitialize()</b> has been
  called does not work when <b>GPTL</b> threading is via OMP. This should
  work OK with PTHREADS, but is untested.
<li> The PAPI library warns about using <b>omp_get_thread_num()</b> as the
  underlying routine to get the thread number. Therefore it's better to
  build <b>GPTL</b> with PTHREADS than OPENMP (see macros.make.linux).
</ul>

<HR SIZE=2 WIDTH="100%" ALIGN="LEFT" NOSHADE>

<h2>Bug Reports</h2>
Please email me bug reports and/or feature requests (jmrosinski2 AT gmail DOT com).

<h2>Author</h2>
<b>GPTL</b> was written
by <a HREF="http://www.burningserver.net/rosinski">Jim Rosinski</a>,
currently at <a HREF="http://www.ornl.gov">ORNL</a>, formerly
  at <a HREF="http://www.sicortex.com">SiCortex</a>,
and <a HREF="http://www.ucar.edu">NCAR</a>. 
<h2>Copyright</h2>
This software is <b>Open Source</b>. My only request is that you don't
embed <b>GPTL</b> library source itself in software that you intend to sell.

<hr />
<a href="example1.html"><img border="0" src="btn_next.gif"
			     width="100" height="20" alt="Example 1" /></a>

<br />
</html>
